	Matthew Na: Bird
For my section of the assignment, I made a Bird class that will animate a bird flying while flapping its wings. The flight and movement of the bird is the main animation whereas the wing's motion serves as the secondary animation. 

The class will initialize with several float arguments, including x and y positions, x and y directions, bird and wing speed. The bird speed is converted to an absolute value to ensure only the direction arguments will determine bird's path. The position and direction arguments are also converted to PVectors for later use. The objects will differ from one another in how they have different flight and wing speeds, starting positions and flight paths. The PShapes are also initialized for later use to draw the bird. For all components of the bird, a conditional statement is used to ensure the bird faces the direction it flies. The class uses several methods to animate properly:

The "fly()" method will use the given speed and direction vectors to determine and update the bird's movements. If the bird's position goes beyond the edge of the canvas, the bird's position will be reset to the opposing edge of the canvas. For example, if it moves past the right of the screen, it will reappear on the left side of the screen. 

The "flap()" method will use the given wing speed argument to make the wings move at a specified rate. The ellipse shape representing the wing of the bird will be continuously updated using a global variable that toggles between the wing moving upwards versus downwards. The rotate function is used to move the wing according to the changing wing angle.

The "display()" method will finally depict the bird in animation. First, a matrix is pushed to create the main animation. The translate transformation function is used to ensure the bird is drawn in the updated positions, ensuring the flight is animated smoothly. The body, wing and head are made with ellipses and the beak is made a triangle. All shapes are made using PShapes to properly draw them. Inside this matrix, another matrix is pushed to create a second level to the animation hierarchy. This allows the wing to be displayed and animated relative to the moving bird. Here, the rotate function is used. Finally, both matrices are popped. 

For extra credit, the sound of birds was also added by importing "ddf.minim.*" into the main file for the running the program. The "birdsound.mp3" file is loaded into the program and played upon running. As mentioned in the README, the Minim library must be installed for this feature.


	Tiffany Nguyen: Campfire
The intent of this animation was to create a campfire with a flickering flame. The CampFire class takes parameters x, y, flameX, flameY, flickerSpeed, and color. x and y would be the location of the campfire's wood, flameX and flameY determine the offset location of the flame compared to the wood, the flickerSpeed determines the speed in which the flame would pulse/flicker, and color changes the color of the flame. There is also a fixed variable that is inside the CampFire class, the scale, which is set at 1 to represent the starting size of the fire. 

The CampFire class contains a flicker and display method:

flicker - adjusts the scale of the tip of the flame, gradually getting larger and then smaller in a continuous loop. It also adjusts the x value of the parent object so that the entire flame moves slightly to the left and right to demonstrate flickering.

display - displays the wood the fire is burning and creates a parent object that is an ellipse that represents the base of the flame. The child object, a triangle, scales and moves along with the parent object, showing hierarchy.

unexpected challenges: During the process of doing this assignment, I misunderstood the meaning of hierarchy in the terms of this assignment. I tried making multiple classes in the beginning, with 2 classes and objects that acted apart from each other. After better understanding transformations, I was able to create hierarchy in my code to where the child object moves in sync with the parent.


	Ethan Harrah: Field, GrassPatch, GrassBlade
For my section, I implemented three classesâ€”Field, GrassPatch, and GrassBlade that create a dynamically rendered field of swaying grass. This involves drawing a large ground area for the field, generating patches of grass at random locations within this field, and animating each individual grass blade with a subtle bending effect, that coincides with the sway seen in the campfire.

The Field class initializes with float parameters such as fieldHeight, backgroundColor, campfireX, campfireY, and grassDensity. The fieldHeight and backgroundColor are used to draw a rectangular section at the bottom of the canvas that represents the ground. The campfireX and campfireY coordinates help exclude the area around the campfire from growing grass. The grassDensity is used to control how frequently grass patches appear. The class contains an array of GrassPatch objects, and the createGrassPatches() method determines where each GrassPatch within this array should be placed. It calculates these patch locations by creating a grid of base locations, which occur more often the higher the grassDensity and are not placed within a certain range of the CampFire. Each patch is then spawned in at a slight random offset to each of these patch locations, for a more natural look. The renderBase() method then the field rectangle, while the renderGrass(sway) method iterates over each GrassPatch and calls its render(sway) method to display render each patch on an individual level.

The GrassPatch class represents a small cluster of grass blades. It has a constructor that takes parameters baseX, baseY, bladeCount, and various maximum variances for blade width, height, and rotation. Inside the constructor, a Random object is used to generate slightly different dimensions and colors for each blade, again making the patch look more natural. The render(sway) method loops through each GrassBlade in the patch and calls its own render(sway) method.

The GrassBlade class is where each individual blade of grass is defined. The constructor accepts parameters for base position (baseX, baseY), blade dimensions, fill color, outline color, and a rotation angle. In the "render(sway)" method, pushMatrix() and translate() are used to position the blade, and rotate() is used to tilt it slightly. A pair of bezier curves are used in the beginShape() and endShape() blocks to create a smooth, bending blade shape. The "sway" parameter is applied to the top part of the curves to simulate wind, causing the blade to oscillate back and forth.

One problem with this approach is the speed of the animation. When adding a large density of grass, or a large amount of blades per grass, the animation can sometimes run slowly. I thought about getting around this by instead creating each GrassPatch as its own object, with the blades being used to generate a series of vertexes, which are then rotated, and whose top vertex is 