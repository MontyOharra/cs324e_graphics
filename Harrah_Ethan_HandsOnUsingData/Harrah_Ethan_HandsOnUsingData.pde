import java.util.ArrayList;

class ItemInfo {
  String memory;
  String hardDrive;
  String cpu;
  String brand;
  String description;
  
  ItemInfo(
    String memory,
    String hardDrive,
    String cpu,
    String brand,
    String description
  ) {
    this.memory = memory;
    this.hardDrive = hardDrive;
    this.cpu = cpu;
    this.brand = brand;
    this.description = description;
  }
}  

class Batter {
  String id;
  String type;
  Batter(String id, String type) {
    this.id = id;
    this.type = type;
  }
}

class Topping {
  String id;
  String type;
  Topping(String id, String type) {
    this.id = id;
    this.type = type;
  }
}

class Donut {
  String id;
  String type;
  String name;
  float ppu;
  ArrayList<Batter> batters;
  ArrayList<Topping> toppings;
  Donut(String id, String type, String name, float ppu, ArrayList<Batter> batters, ArrayList<Topping> toppings) {
    this.id = id;
    this.type = type;
    this.name = name;
    this.ppu = ppu;
    this.batters = batters;
    this.toppings = toppings;
  }
}

ArrayList<ItemInfo> itemsInfo = new ArrayList();
ArrayList<Donut> donuts = new ArrayList();

void setup() {
  size(900, 900); 
  XML rootXml = loadXML("ebay.xml");
  for (XML listing : rootXml.getChildren("listing")) {
    XML itemInfo = listing.getChild("item_info");
    String memory = itemInfo.getChild("memory").getContent();
    String hardDrive = itemInfo.getChild("hard_drive").getContent();
    String cpu = itemInfo.getChild("cpu").getContent();
    String brand = itemInfo.getChild("brand").getContent();
    String description = itemInfo.getChild("description").getContent();
    
    ItemInfo currItemInfo = new ItemInfo(
      memory,
      hardDrive,
      cpu,
      brand,
      description
    );
    
    itemsInfo.add(currItemInfo);
  }
  
  JSONArray donutJsonArray = loadJSONArray("jsonData.json");
  
  for (int currDonutIndex = 0; currDonutIndex < donutJsonArray.size(); currDonutIndex++) {
    JSONObject donutJson = donutJsonArray.getJSONObject(currDonutIndex);
    String id = donutJson.getString("id");
    String type = donutJson.getString("type");
    String name = donutJson.getString("name");
    float ppu = donutJson.getFloat("ppu");
    
    ArrayList<Batter> batters = new ArrayList();
    JSONArray battersJson = donutJson.getJSONObject("batters").getJSONArray("batter");
    for (int i = 0; i < battersJson.size(); i++) {
       JSONObject batter = battersJson.getJSONObject(i);
       Batter currBatter = new Batter(batter.getString("id"), batter.getString("type"));
       batters.add(currBatter);
    }
    
    ArrayList<Topping> toppings = new ArrayList();
    JSONArray toppingsJson = donutJson.getJSONArray("topping");
    for (int i = 0; i < toppingsJson.size(); i++) {
       JSONObject topping = toppingsJson.getJSONObject(i);
       Topping currTopping = new Topping(topping.getString("id"), topping.getString("type"));
       toppings.add(currTopping);
    }
    
    Donut currDonut = new Donut(
      id,
      type,
      name,
      ppu,
      batters,
      toppings
    );
    
    donuts.add(currDonut);
  }
}

void draw() {
  // Just for honesty I did have this data display part generated by chatgpt after starting it out because
  // it got very repetitive and annoying to tweak things so that they were nicely visual.
  background(255);
  fill(0);
  textSize(14);
  int yLeft = 30;
  for (ItemInfo item : itemsInfo) {
    String d = item.description;
    if (d.length() > 50) d = d.substring(0, 50) + "...";
    fill(200);
    rect(20, yLeft - 12, 300, 18);
    fill(0);
    text("Brand: " + item.brand, 25, yLeft);
    yLeft += 20;
    fill(200);
    rect(20, yLeft - 12, 300, 18);
    fill(0);
    text("Memory: " + item.memory, 25, yLeft);
    yLeft += 20;
    fill(200);
    rect(20, yLeft - 12, 300, 18);
    fill(0);
    text("Hard Drive: " + item.hardDrive, 25, yLeft);
    yLeft += 20;
    fill(200);
    rect(20, yLeft - 12, 300, 18);
    fill(0);
    text("CPU: " + item.cpu, 25, yLeft);
    yLeft += 20;
    fill(200);
    rect(20, yLeft - 12, 300, 18);
    fill(0);
    text("Description: " + d, 25, yLeft);
    yLeft += 40;
  }
  int xRight = width / 2;
  int yRight = 30;
  for (Donut donut : donuts) {
    fill(200);
    rect(xRight, yRight - 12, 300, 18);
    fill(0);
    text("Name: " + donut.name, xRight + 5, yRight);
    yRight += 20;
    fill(200);
    rect(xRight, yRight - 12, 300, 18);
    fill(0);
    text("ID: " + donut.id, xRight + 5, yRight);
    yRight += 20;
    fill(200);
    rect(xRight, yRight - 12, 300, 18);
    fill(0);
    text("Type: " + donut.type, xRight + 5, yRight);
    yRight += 20;
    fill(200);
    rect(xRight, yRight - 12, 300, 18);
    fill(0);
    text("PPU: " + donut.ppu, xRight + 5, yRight);
    yRight += 20;
    fill(200);
    rect(xRight, yRight - 12, 300, 18);
    fill(0);
    text("Batters:", xRight + 5, yRight);
    yRight += 20;
    for (Batter b : donut.batters) {
      fill(200);
      rect(xRight, yRight - 12, 300, 18);
      fill(0);
      text(b.type + " (" + b.id + ")", xRight + 20, yRight);
      yRight += 20;
    }
    fill(200);
    rect(xRight, yRight - 12, 300, 18);
    fill(0);
    text("Toppings:", xRight + 5, yRight);
    yRight += 20;
    for (Topping t : donut.toppings) {
      fill(200);
      rect(xRight, yRight - 12, 300, 18);
      fill(0);
      text(t.type + " (" + t.id + ")", xRight + 20, yRight);
      yRight += 20;
    }
    yRight += 40;
  }
}
